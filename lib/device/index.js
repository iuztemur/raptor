var util = require('util');
var Command = require('../command');
var debug = require('debug')('raptor:device');

var logCommand = util.format('adb shell \'log -p %s -t %s "%s"\'');

var Device = {

  /**
   * Get a printf-formatted string of an adb shell log command
   * @param {string} priority log command priority, e.g. v, d, i, w, e
   * @param {string} tag log command process tag, e.g. GeckoConsole, Homescreen
   * @param {string} message message to write to the ADB log
   * @returns {string}
   */
  getLogCommand: function(priority, tag, message) {
    return util.format(logCommand, priority, tag, message)
  },

  /**
   * Write a message to the ADB log
   * @param {string} priority log command priority, e.g. v, d, i, w, e
   * @param {string} tag log command process tag, e.g. GeckoConsole, Homescreen
   * @param {string} message message to write to the ADB log
   * @returns {Promise}
   */
  log: function(priority, tag, message) {
    debug('[Logging]', message);
    return new Command(Device.getLogCommand(priority, tag, message)).exec();
  },

  /**
   * Write a User Timing performance entry mark to the ADB log
   * @param {string} name performance mark name
   * @param {number} time Unix epoch of when the performance mark occurred
   * @returns {Promise}
   */
  mark: function(name, time) {
    var mark = util.format('Performance Entry: mark|%s|0|0|%s', name, time);
    return Device.log('i', 'GeckoConsole', mark);
  },

  /**
   * Clear the ADB log
   * @returns {Promise}
   */
  clearLog: function() {
    debug('[Logging] Clearing Log');
    return new Command()
      .adb('logcat -c')
      .exec();
  },

  /**
   * Reboot the device while writing associated performance marks to the ADB log
   * @returns {Promise}
   */
  reboot: function() {
    debug('[Rebooting]');
    return new Command()
      .env('DEVICETIME', "$(adb shell echo '$EPOCHREALTIME')")
      .and().adb('reboot')
      .and().adb('wait-for-device')
      .and().echo('$DEVICETIME')
      .exec()
      .then(function(stdout) {
        // The time generated by EPOCHREALTIME is seconds, we need milliseconds
        var time = parseFloat(stdout.replace('\n', '')) * 1000;
        Device.mark('deviceReboot@System', time);
      });
  },

  /**
   * Start and stop the B2G process on the device
   * @returns {Promise}
   */
  restartB2G: function() {
    debug('[Restarting B2G]');
    return new Command()
      .adbShell('stop b2g')
      .and().adbShell('start b2g')
      .exec();
  },

  /**
   * Close an application with the specified PID
   * @param {number|string} pid
   * @returns {Promise}
   */
  closeApp: function(pid) {
    debug('[Closing App] PID %d', pid);
    return new Command()
      .adbShell('kill ' + pid)
      .exec();
  },

  /**
   * Write the memory information for a given process name belonging to an app
   * @param {string} processName process name for the app e.g. Communications
   * @param {string} application app name or entry point e.g. Homescreen, Dialer
   * @returns {Promise}
   */
  logMemory: function(processName, application) {
    var message = util.format('Memory Entry: %s|$(b2g-info | grep "%s")',
      application, processName);

    return Device.log('i', 'GeckoConsole', message);
  }

};

module.exports = Device;